// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Minor.Case1.FrontEnd.FrontEnd.Agents
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for CursusInstantieService.
    /// </summary>
    public static partial class CursusInstantieServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static IList<CursusInstantie> GetCursusInstantiesVanEenBepaaldeWeek(this ICursusInstantieService operations, DateModel model = default(DateModel))
            {
                return Task.Factory.StartNew(s => ((ICursusInstantieService)s).GetCursusInstantiesVanEenBepaaldeWeekAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CursusInstantie>> GetCursusInstantiesVanEenBepaaldeWeekAsync(this ICursusInstantieService operations, DateModel model = default(DateModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCursusInstantiesVanEenBepaaldeWeekWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='values'>
            /// </param>
            public static int? PostCursusInstanties(this ICursusInstantieService operations, IList<CursusInstantie> values = default(IList<CursusInstantie>))
            {
                return Task.Factory.StartNew(s => ((ICursusInstantieService)s).PostCursusInstantiesAsync(values), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='values'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> PostCursusInstantiesAsync(this ICursusInstantieService operations, IList<CursusInstantie> values = default(IList<CursusInstantie>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostCursusInstantiesWithHttpMessagesAsync(values, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<Inschrijving> GetInschrijvingenByCursusInstantieId(this ICursusInstantieService operations, int? id = default(int?))
            {
                return Task.Factory.StartNew(s => ((ICursusInstantieService)s).GetInschrijvingenByCursusInstantieIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Inschrijving>> GetInschrijvingenByCursusInstantieIdAsync(this ICursusInstantieService operations, int? id = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInschrijvingenByCursusInstantieIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inschrijving'>
            /// </param>
            public static int? PostInschrijving(this ICursusInstantieService operations, Inschrijving inschrijving = default(Inschrijving))
            {
                return Task.Factory.StartNew(s => ((ICursusInstantieService)s).PostInschrijvingAsync(inschrijving), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inschrijving'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> PostInschrijvingAsync(this ICursusInstantieService operations, Inschrijving inschrijving = default(Inschrijving), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostInschrijvingWithHttpMessagesAsync(inschrijving, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
